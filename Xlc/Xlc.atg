COMPILER Xlc
/* x language compiler */
CHARACTERS
  sign        = '+' + '-'.
  digit       = '0'..'9'.
  hexdigit    = digit + 'a'..'f' + 'A'..'F'.
  newline     = '\n'.
  whitespace  = ' ' + '\r' + '\t' + newline.
  instring    = ANY - '"' - newline.
  idchar      = instring - whitespace - ",;[]".
 
TOKENS
  string      = '"' {instring | "\\\"" | "\\n"} '"'.
  id          = '$' idchar {idchar}.
  valtype     = ('i' | 'f') ("32" | "64").
  num         = [sign] digit {digit}.
  hexnum      = [sign] "0x" hexdigit {hexdigit}.
  float       = ([sign] digit {digit} '.' digit {digit}) | "inf" | "nan".
  hexfloat    = ([sign] "0x" hexdigit {hexdigit} '.' hexdigit {hexdigit}) | "nan:0x" hexdigit {hexdigit}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO newline
IGNORE whitespace

PRODUCTIONS
  Xlc =
    Module<.out Module mod.> (. xlc = new Xlc(token) { module = mod }; .).
    
  Module<.out Module mod.> =
    "module"                               (. mod = new Module(token); .)
    [string                                (. mod.name = t.val; .)]
    {ModuleField<.out IModuleField field.> (. mod.fields.Add(field); .)}.

  ModuleField<.out IModuleField field.> = (. field = null; .)
    ( FuncType<.out FuncType functype.>   (. field = functype; .)
    | Import<.out Import import.>         (. field = import; .)).

  FuncType<.out FuncType functype.> =
    "fn"                                         (. functype = new FuncType(token); .)
    "(" [Param<.out Param param0.>               (. functype.parameters.Add(param0); .)
    {"," Param<.out Param paramN.>               (. functype.parameters.Add(paramN); .)}]
    ")" "[" [ResultType<.out ResultType result.> (. functype.results.Add(result); .)]
    "]".

  Param<.out Param param.> =
    id valtype (. param = new Param(token) { id = token.val, valtype = t.val }; .).

  ResultType<.out ResultType result.> =
    valtype (. result = new ResultType(token) { valtype = t.val }; .).

  Import<.out Import import.> =
    "import" (. import = new Import(token); .).

END Xlc.
