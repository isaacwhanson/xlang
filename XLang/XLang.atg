COMPILER XLang

CHARACTERS
  lower       = 'a'..'z' + '_'.
  upper       = 'A'..'Z'.
  letter      = lower + upper.
  newline     = '\r' + '\n'.
  whitespace  = ' ' + '\t' + '\u000b' + '\u000c' + '\f'.
  bin         = "01".
  oct         = '0'..'7'.
  digit       = '0'..'9'.
  nonzero     = '1'..'9'.
  hex         = digit + 'a'..'f' + 'A'..'F'.
  notquote    = ANY - '\"' - newline.
  notapost    = ANY - '\'' - newline.
  sign        = "+-".
  e           = "eE".

TOKENS
  identifier  = lower {letter | digit}.
  type        = upper {letter | digit}.
  string      = '"' {notquote | "\\\""} '"'.
  character   = '\'' (notapost | "\\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" | "\\u" hex hex hex hex) '\''.
  float       = (digit {digit} '.' digit {digit} [e [sign] digit {digit}] | digit {digit} e [sign] digit {digit}) ['f'|'l'|'F'|'L'].
  integer     = (nonzero {digit} | '0' ['o'|'O'] {oct} | ("0x"|"0X") hex {hex} | ("0b"|"0B") bin {bin}) {'u'|'U'|'l'|'L'}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO "\n"
COMMENTS FROM "#" TO "\n"
IGNORE whitespace + newline

PRODUCTIONS
  XLang =
    Module<.out Module module.>              (. xlang = new XLang(token) { module = module, filename = filename };.).

  Module<.out Module module.> =              (. module = new Module(token);.)
     GlblStmt<.out IStmt stmt0.>              (. module.Add(stmt0);.)
    {GlblStmt<.out IStmt stmt1.>              (. module.Add(stmt1);.)}.

  GlblStmt<.out IStmt stmt.> = SYNC
    LetStmt<.out stmt.> SYNC ";".

  StmtBlock<.out StmtBlock stmt.> =          (. stmt = new StmtBlock(token);.)
    "{" {Stmt<.out IStmt stmt0.>              (. stmt.Add(stmt0);.)}
    "}".

  Stmt<.out IStmt stmt.> =                    (. stmt = null;.)
    ( StmtBlock<.out StmtBlock block.>       (. stmt = block;.)
    | RetStmt<.out RetStmt ret.>             (. stmt = ret;.)
    | BreakStmt<.out BreakStmt brk.>         (. stmt = brk;.)
    | ContStmt<.out ContStmt cont.>          (. stmt = cont;.)
    | WhileStmt<.out WhileStmt whil.>        (. stmt = whil;.)) ";".

  WhileStmt<.out WhileStmt stmt.> =
    "while"
    "(" Expr<.out IExpr expr.>
    ")" Stmt<.out IStmt stmt0.>               (. stmt = new WhileStmt(token) { expr = expr, stmt = stmt0 };.).

  BreakStmt<.out BreakStmt stmt.> =
    "break"                                   (. stmt = new BreakStmt(token);.).

  ContStmt<.out ContStmt stmt.> =
    "continue"                                (. stmt = new ContStmt(token);.).

  RetStmt<.out RetStmt stmt.> =
    "return"                                  (. stmt = new RetStmt(token);.)
    [Expr<.out IExpr expr.>                   (. stmt.expr = expr;.)].

  LetStmt<.out IStmt letstmt.> =
    "let"                                     (. letstmt = null;.)
    Type<.out Type typ.> Ident<.out Ident ident.>
    (ParamDeclList<.out ParamDeclList plist.> "=>" Stmt<.out IStmt stmt.>
                                              (. letstmt = new LetStmt(token) { ident = ident, plist = plist, stmt = stmt };.)
    | "=" Expr<.out IExpr expr.>              (. letstmt = new LetStmt(token) { ident = ident, expr = expr };.)).

  ParamDecl<.out ParamDecl param.> =
    Type<.out Type typ0.>
    Ident<.out Ident ident0.>                (. param = new ParamDecl(token) { type = typ0, ident = ident0 };.).

  ParamDeclList<.out ParamDeclList list.> =
    "("                                       (. list = new ParamDeclList(token);.)
    [ParamDecl<.out ParamDecl p0.>           (. list.Add(p0);.)
    {"," ParamDecl<.out ParamDecl p1.>       (. list.Add(p1);.)}]
    ")".

  Expr<.out IExpr expr.> =
    CondExpr<.out expr.>.

  CondExpr<.out IExpr expr.> =
    LogOrExpr<.out expr.>
    ['?'                                      (. token = t;.)
     Expr<.out IExpr consequent.>
     ':' Expr<.out IExpr alternative.>        (. expr = new CondExpr(token) { condition = expr, consequent = consequent, alternative = alternative };.)].

  LogOrExpr<.out IExpr expr.> =
    LogXorExpr<.out expr.>
    {"||"                                     (. token = t;.)
    LogXorExpr<.out IExpr rhs.>               (. expr = new LogOrExpr(token) { left = expr, right = rhs };.)}.

  LogXorExpr<.out IExpr expr.> =
    LogAndExpr<.out expr.>
    {"^^"                                     (. token = t;.)
    LogAndExpr<.out IExpr rhs.>               (. expr = new LogXorExpr(token) { left = expr, right = rhs };.)}.

  LogAndExpr<.out IExpr expr.> =
    OrExpr<.out expr.>
    {"&&"                                     (. token = t;.)
    OrExpr<.out IExpr rhs.>                   (. expr = new LogAndExpr(token) { left = expr, right = rhs };.)}.

  OrExpr<.out IExpr expr.> =
    XorExpr<.out expr.>
    {'|'                                      (. token = t;.)
    XorExpr<.out IExpr rhs.>                  (. expr = new OrExpr(token) { left = expr, right = rhs };.)}.

  XorExpr<.out IExpr expr.> =
    AndExpr<.out expr.>
    {'^'                                      (. token = t;.)
    AndExpr<.out IExpr rhs.>                  (. expr = new XorExpr(token) { left = expr, right = rhs };.)}.

  AndExpr<.out IExpr expr.> =
    EqlExpr<.out expr.>
    {'&'                                      (. token = t;.)
    EqlExpr<.out IExpr rhs.>                  (. expr = new AndExpr(token) { left = expr, right = rhs };.)}.

  EqlExpr<.out IExpr expr.> =
    RelExpr<.out expr.>                      {(. EqlOp op; token = la;.)
    ( "=="                                    (. op = EqlOp.EQUAL;.)
    | "!="                                    (. op = EqlOp.NOTEQUAL;.)
    | "==="                                   (. op = EqlOp.HARDEQUAL;.)
    | "!=="                                   (. op = EqlOp.HARDNOTEQUAL;.))
    RelExpr<.out IExpr rhs.>                  (. expr = new EqlExpr(token) { op = op, left = expr, right = rhs };.)}.

  RelExpr<.out IExpr expr.> =
    ShiftExpr<.out expr.>                    {(. RelOp op; token = la;.)
    ( '<'                                     (. op = RelOp.LESSTHAN;.)
    | '>'                                     (. op = RelOp.GREATERTHAN;.)
    | "<="                                    (. op = RelOp.LESSTHANEQUAL;.)
    | ">="                                    (. op = RelOp.GREATERTHANEQUAL;.))
    ShiftExpr<.out IExpr rhs.>                (. expr = new RelExpr(token) { op = op, left = expr, right = rhs };.)}.

  ShiftExpr<.out IExpr expr.> =
    AddExpr<.out expr.>                      {(. ShiftOp op; token = la;.)
    ( "<<"                                    (. op = ShiftOp.LEFT;.)
    | ">>"                                    (. op = ShiftOp.RIGHT;.))
    AddExpr<.out IExpr rhs.>                  (. expr = new ShiftExpr(token) { op = op, left = expr, right = rhs };.)}.

  AddExpr<.out IExpr expr.> =
    MultExpr<.out expr.>                     {(. AddOp op; token = la;.)
    ( '+'                                     (. op = AddOp.PLUS;.)
    | '-'                                     (. op = AddOp.MINUS;.))
    MultExpr<.out IExpr rhs.>                 (. expr = new AddExpr(token) { op = op, left = expr, right = rhs };.)}.

  MultExpr<.out IExpr expr.> =
    UnaryExpr<.out expr.>                    {(. MultOp op; token = la;.)
    ( '*'                                     (. op = MultOp.TIMES;.)
    | '/'                                     (. op = MultOp.DIVIDE;.)
    | '%'                                     (. op = MultOp.MODULO;.))
    UnaryExpr<.out IExpr rhs.>                (. expr = new MultExpr(token) { op = op, left = expr, right = rhs };.)}.

  UnaryExpr<.out IExpr expr.> =               (. expr = null;.)
    (Primitive<.out expr.>                   |(. UnaryOp op;.)
    (('-'                                     (. op = UnaryOp.NEGATE;.)
    | '~'                                     (. op = UnaryOp.COMPLIMENT;.)
    | '!'                                     (. op = UnaryOp.NOT;.))
    UnaryExpr<.out IExpr lhs.>                (. expr = new UnaryExpr(token) { op = op, left = lhs };.))).

  Primitive<.out IExpr expr.> =               (. expr = null;.)
    ( Ident<.out Ident lhs.>                 (. expr = lhs;.)
    | String<.out String lhs.>               (. expr = lhs;.)
    | Char<.out Char lhs.>                   (. expr = lhs;.)
    | Float<.out Float lhs.>                 (. expr = lhs;.)
    | Int<.out Int lhs.>                     (. expr = lhs;.)
    | Boolean<.out Boolean lhs.>             (. expr = lhs;.)
    | Type<.out Type lhs.>                   (. expr = lhs;.)
    | Array<.out Array lhs.>                 (. expr = lhs;.)
    | '(' Expr<.out IExpr lhs.> WEAK ')'      (. expr = lhs;.)).

  Ident<.out Ident term.> = identifier       (. term = new Ident(token);.).
  String<.out String term.> = string         (. term = new String(token);.).
  Char<.out Char term.> = character          (. term = new Char(token);.).
  Int<.out Int term.> = integer              (. term = new Int(token);.).
  Float<.out Float term.> = float            (. term = new Float(token);.).
  Type<.out Type term.> = type               (. term = new Type(token);.).
  Boolean<.out Boolean term.> =
    ("true" | "false")                        (. term = new Boolean(token);.).

  Array<.out Array ra.> =                   
    '['                                       (. ra = new Array(token);.)
    [Expr<.out IExpr exp0.>                   (. ra.Add(exp0);.)
    {',' Expr<.out IExpr exp1.>               (. ra.Add(exp1);.)}]
    ']'.

END XLang.
