/* Coco/R ATG for (C#) XLang Compiler */
// --> Imports
using System.Collections;

COMPILER XLang

// --> GlobalFieldsAndMethods
public _XLang xlang;

CHARACTERS
  lower       = 'a'..'z'.
  upper       = 'A'..'Z'.
  letter      = lower + upper + '_'.
  newline     = '\r' + '\n'.
  whitespace  = ' ' + '\t' + '\u000b' + '\u000c' + '\f'.
  bin         = "01".
  oct         = '0'..'7'.
  digit       = '0'..'9'.
  nonzero     = '1'..'9'.
  hex         = digit + 'a'..'f' + 'A'..'F'.
  notquote    = ANY - '\"' - newline.
  notapost    = ANY - '\'' - newline.
  sign        = "+-".
  e           = "eE".

TOKENS
  id          = letter {letter | digit}.
  string      = '"' {notquote | "\\\""} '"'.
  char        = '\'' (notapost | "\\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" | "\\u" hex hex hex hex) '\''.
  float       = (digit {digit} '.' digit {digit} [e [sign] digit {digit}] | digit {digit} e [sign] digit {digit}) ['f'|'l'|'F'|'L'].
  int         = (nonzero {digit} | '0' ['o'|'O'] {oct} | ("0x"|"0X") hex {hex} | ("0b"|"0B") bin {bin}) {'u'|'U'|'l'|'L'}.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO "\n"
COMMENTS FROM "#" TO "\n"

IGNORE whitespace + newline

// --> ParserSpecificaton
PRODUCTIONS
  XLang =                                 (. xlang = new _XLang();          .)
    Module<out _Module m>                 (. xlang.Push(m);                 .).

  Module<out _Module module> =            (. module = new _Module();        .)
     GlblStmt<out _GlblStmt s0> ";"       (. module.Push(s0);               .)
    {GlblStmt<out _GlblStmt s1> ";"       (. module.Push(s1);               .)}.

  GlblStmt<out _GlblStmt s> =             (. s = new _GlblStmt();           .)
    "let" id                              (. s.id = t.val;                  .)
     "=" Expr<out IExpr e>                (. s.expr = e;                    .).

  Expr<out IExpr ex> =
    CondExpr<out IExpr e>                 (. ex = e;                        .).

  CondExpr<out IExpr ex> =                (. ex = new _CondExpr();          .)
    LogOrExpr ['?' Expr<out IExpr e1> ':' CondExpr<out IExpr e2>].
  LogOrExpr =
    LogAndExpr {"||" LogAndExpr}.
  LogAndExpr =
    OrExpr {"&&" OrExpr}.
  OrExpr =
    XorExpr {'|' XorExpr}.
  XorExpr =
    AndExpr {'^' AndExpr}.
  AndExpr =
    EqlExpr {'&' EqlExpr}.
  EqlExpr =
    RelExpr {("==" | "!=") RelExpr}.
  RelExpr =
    ShiftExpr {('<' | '>' | "<=" | ">=") ShiftExpr}.
  ShiftExpr =
    AddExpr {("<<" | ">>") AddExpr}.
  AddExpr =
    MultExpr {('+' | '-') MultExpr}.
  MultExpr =
    UnaryExpr {('*' | '/' | '%') UnaryExpr}.

  UnaryExpr =
    Primary | UnaryOp UnaryExpr.

  Primary = id | int | float | char | string | '(' Expr<out IExpr e> ')'.

  UnaryOp = '&' | '*' | '+' | '-' | '~' | '!'.

END XLang.
