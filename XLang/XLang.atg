/* Coco/R ATG for (C#) XLang Compiler */
// --> Imports
using System.Collections;

COMPILER XLang

// --> GlobalFieldsAndMethods
public _XLang xlang;

CHARACTERS
  lower       = 'a'..'z'.
  upper       = 'A'..'Z'.
  letter      = lower + upper + '_'.
  newline     = '\r' + '\n'.
  whitespace  = ' ' + '\t' + '\u000b' + '\u000c' + '\f'.
  bin         = "01".
  oct         = '0'..'7'.
  digit       = '0'..'9'.
  nonzero     = '1'..'9'.
  hex         = digit + 'a'..'f' + 'A'..'F'.
  notquote    = ANY - '\"' - newline.
  notapost    = ANY - '\'' - newline.
  sign        = "+-".
  e           = "eE".

TOKENS
  id          = letter {letter | digit}.
  string      = '"' {notquote | "\\\""} '"'.
  char        = '\'' (notapost | "\\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" | "\\u" hex hex hex hex) '\''.
  float       = (digit {digit} '.' digit {digit} [e [sign] digit {digit}] | digit {digit} e [sign] digit {digit}) ['f'|'l'|'F'|'L'].
  int         = (nonzero {digit} | '0' ['o'|'O'] {oct} | ("0x"|"0X") hex {hex} | ("0b"|"0B") bin {bin}) {'u'|'U'|'l'|'L'}.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO "\n"
COMMENTS FROM "#" TO "\n"

IGNORE whitespace + newline

// --> ParserSpecificaton
PRODUCTIONS
  XLang =                                   (. xlang = new _XLang(); .)
    Module<out _Module module>              (. xlang.module = module; .).

  Module<out _Module module> =              (. module = new _Module(); .)
     GlblStmt<out IGlblStmt glbl_stmt0>     (. module.stmts.Add(glbl_stmt0); .)
    {GlblStmt<out IGlblStmt glbl_stmt1>     (. module.stmts.Add(glbl_stmt1); .)}.

  GlblStmt<out IGlblStmt glbl_stmt> =
    (LetStmt<out _LetStmt let_stmt>         (. glbl_stmt = let_stmt; .)) ";".

  LetStmt<out _LetStmt let_stmt> =
    "let" id                                (. string id = t.val; .)
    "=" Expr<out IExpr expr>                (. let_stmt = new _LetStmt(){ id=id, expr=expr }; .).

  Expr<out IExpr expr> =
    CondExpr<out IExpr lhs>                 (. expr = lhs; .).

  CondExpr<out IExpr expr> =
    LogOrExpr<out IExpr lhs>                (. expr = lhs; .)
    ['?' Expr<out IExpr consequent>
     ':' Expr<out IExpr alternative>        (. expr = new _CondExpr() { condition=expr, consequent=consequent, alternative=alternative }; .)].

  LogOrExpr<out IExpr expr> =
    LogAndExpr<out IExpr lhs>               (. expr = lhs; .)
    {"||" LogAndExpr<out IExpr rhs>         (. expr = new _LogOrExpr() { left=expr, right=rhs }; .)}.

  LogAndExpr<out IExpr expr> =
    OrExpr<out IExpr lhs>                   (. expr = lhs; .)
    {"&&" OrExpr<out IExpr rhs>             (. expr = new _LogAndExpr() { left=expr, right=rhs }; .)}.

  OrExpr<out IExpr expr> =
    XorExpr<out IExpr lhs>                  (. expr = lhs; .)
    {'|' XorExpr<out IExpr rhs>             (. expr = new _OrExpr() { left=expr, right=rhs }; .)}.

  XorExpr<out IExpr expr> =
    AndExpr<out IExpr lhs>                  (. expr = lhs; .)
    {'^' AndExpr<out IExpr rhs>             (. expr = new _XorExpr() { left=expr, right=rhs }; .)}.

  AndExpr<out IExpr expr> =
    EqlExpr<out IExpr lhs>                  (. expr = lhs; .)
    {'&' EqlExpr<out IExpr rhs>             (. expr = new _AndExpr() { left=expr, right=rhs }; .)}.

  EqlExpr<out IExpr expr> =                 (. expr = new _Expr(); .)
    RelExpr<out IExpr rel0> {("==" | "!=") RelExpr<out IExpr rel1>}.

  RelExpr<out IExpr expr> =                 (. expr = new _Expr(); .)
    ShiftExpr<out IExpr shift0> {('<' | '>' | "<=" | ">=") ShiftExpr<out IExpr shift1>}.

  ShiftExpr<out IExpr expr> =               (. expr = new _Expr(); .)
    AddExpr<out IExpr add0> {("<<" | ">>") AddExpr<out IExpr add1>}.

  AddExpr<out IExpr expr> =                 (. expr = new _Expr(); .)
    MultExpr<out IExpr mul0> {('+' | '-') MultExpr<out IExpr mul1>}.

  MultExpr<out IExpr expr> =                (. expr = new _Expr(); .)
    UnaryExpr<out IExpr un0> {('*' | '/' | '%') UnaryExpr<out IExpr un1>}.

  UnaryExpr<out IExpr expr> =               (. expr = new _Expr(); .)
    (Primary | UnaryOp UnaryExpr<out IExpr un0>).

  Primary =
    Ident<out IExpr expr>
    | String<out IExpr expr>
    | Char<out IExpr expr>
    | Float<out IExpr expr>
    | Int<out IExpr expr>
    | '(' Expr<out IExpr expr> ')'.

  Ident<out IExpr expr> =
    id                                      (. expr = new _Ident() { name=t.val }; .).

  String<out IExpr expr> =
    string                                  (. expr = new _String() { value=t.val }; .).

  Char<out IExpr expr> =
    char                                    (. expr = new _Char() { value=t.val }; .).

  Int<out IExpr expr> =
    int                                     (. expr = new _Int() { value=t.val }; .).

  Float<out IExpr expr> =
    float                                   (. expr = new _Float() { value=t.val }; .).
 
  UnaryOp = '&' | '*' | '+' | '-' | '~' | '!'.

END XLang.
